from machine import Pin, SPI, PWM, I2C
from ssd1306 import SSD1306_I2C
import network
from umqtt.simple import MQTTClient
from mfrc522 import MFRC522
import utime

# Configuración del SPI para el lector RFID
sck = Pin(18, Pin.OUT)
mosi = Pin(23, Pin.OUT)
miso = Pin(19, Pin.IN)
spi = SPI(1, baudrate=1000000, polarity=0, phase=0, sck=sck, mosi=mosi, miso=miso)

# Configuración del lector RFID
rst_pin = Pin(13, Pin.OUT)
cs_pin = Pin(5, Pin.OUT)
rfid = MFRC522(spi, rst_pin, cs_pin)

SSID = "841F80"
PASSWORD = "278305098"

# Configuración del broker MQTT
BROKER = "broker.hivemq.com"
TOPIC = "zapato"
ERROR_TOPIC = "error"  # Nuevo tema para recibir mensajes de error

# Configuración del buzzer
buzzer_pin = Pin(14, Pin.OUT)
buzzer_pwm = PWM(buzzer_pin)
buzzer_pwm.freq(440)  # Frecuencia de resonancia del buzzer

# Configuración del display OLED
i2c = I2C(0, scl=Pin(22), sda=Pin(21))
oled = SSD1306_I2C(128, 64, i2c)

# Función para conectar a la red WiFi
def connect_wifi():
    wlan = network.WLAN(network.STA_IF)
    if not wlan.isconnected():
        print("Conectando a WiFi...")
        wlan.active(True)
        wlan.connect(SSID, PASSWORD)
        while not wlan.isconnected():
            pass
    print("Conexión WiFi exitosa")

# Función para conectar al broker MQTT
def connect_mqtt():
    client = MQTTClient("esp32", BROKER)
    client.connect()
    print("Conexión MQTT exitosa")
    return client

# Función para manejar el mensaje de error recibido
def handle_error(topic, msg):
    if topic == b"error":
        print("Error:", msg.decode())  # Imprimir el mensaje de error recibido

# Función principal para leer el UID de la tarjeta RFID y publicarlo en MQTT
def main():
    connect_wifi()
    mqtt_client = connect_mqtt()

    # Suscribirse al tema de error para manejar mensajes de error
    mqtt_client.set_callback(handle_error)
    mqtt_client.subscribe(ERROR_TOPIC)

    while True:
        stat, tag_type = rfid.request(rfid.REQIDL)
        if stat == rfid.OK:
            print("Tarjeta detectada...")
            stat, raw_uid = rfid.anticoll()
            if stat == rfid.OK:
                uid_actual = ":".join([hex(i) for i in raw_uid])
                print("UID de la tarjeta:", uid_actual)
                mqtt_client.publish(TOPIC, uid_actual)
                # Hacer sonar el buzzer como confirmación
                buzzer_pwm.duty(1023)  # Encender el buzzer al máximo de su capacidad
                utime.sleep(0.2)  # Mantenerlo encendido durante 0.2 segundos
                buzzer_pwm.duty(0)  # Apagar el buzzer
                # Mostrar el mensaje "Producto registrado" en el display OLED debajo de "Producto:"
                oled.fill(0)
                oled.text("Producto:", 5, 10, 1)
                oled.text("registrado", 5, 25, 1)  # Cambié la posición del texto
                oled.show()
                # Esperar 3 segundos antes de borrar el mensaje
                utime.sleep(3)
                oled.fill(0)  # Borrar el mensaje
                oled.show()
        else:
            # No se detectó ninguna tarjeta, no hacer sonar el buzzer
            buzzer_pwm.duty(0)
        utime.sleep(0.5)  # Esperar 1 segundo antes de la próxima detección

if _name_ == "_main_":
    main()